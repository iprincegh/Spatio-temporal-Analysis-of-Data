plot.numbers = TRUE,
main = "Empirical Variogram with Plot Numbers",
xlab = "Distance h [m]",
ylab = expression(gamma(h)),
xlim = c(0, 1.055 * max(v.m$dist)),
ylim = c(10000, max(v.m$gamma) * 1.1))
emperical
# Fitted Variogram
model_initial <- vgm(psill = 8000, model = "Exp", range = 200, nugget = 1500)
vm_fit <- fit.variogram(v.m, model = model_initial, fit.method = 6)
print(vm_fit)
max_distance <- max(v.m$dist)
# Plotting the fitted variogram model
fitted_model <- plot(v.m, vm_fit, plot.numbers = TRUE, cutoff = 1.1 * max_distance,
main = "Fitted Variogram Model",
xlab = "Distance",
ylab = expression(gamma(h)))
fitted_model
# Correlation between effective treatment and malaria incidence
correlation_analysis <- ghana_full_data %>%
summarize(Correlation = cor(Value.x, Value.y, use = "complete.obs"))
print(correlation_analysis)
# treatment and malaria incidence trends plot
inciTrends <- plot_ly(data = ghana_full_data, x = ~Year) %>%
add_lines(y = ~Value.x, name = "Malaria Incidence",
line = list(color = 'red', width = 1.2)) %>%
add_lines(y = ~Value.y, name = "Effective Treatment",
line = list(color = 'blue', width = 1.2)) %>%
add_markers(x = ~Year[which.max(Value.x)], y = ~max(Value.x),
name = "Highest Incidence", marker = list(color = 'black')) %>%
layout(
title = "Trends with Highlighted Significant Changes",
xaxis = list(title = "Year"),
yaxis = list(title = "Value (Per 100 Cases or Thousand)")
)
inciTrends
# intervention by period
ghana_full_data <- ghana_full_data %>%
mutate(Period = ifelse(Year < intervention_year, "Before Intervention", "After Intervention"))
# Periodic Incidence & Treatment Mean
treatment_comparison <- ghana_full_data %>%
group_by(Period) %>%
summarize(
Mean_Incidence = mean(Value.x, na.rm = TRUE),
Mean_Treatment = mean(Value.y, na.rm = TRUE)
)
print(treatment_comparison)
# visualizing Periodic Incidence & Treatment Mean
incEtreatment <- ggplot(treatment_comparison, aes(x = Period)) +
geom_bar(aes(y = Mean_Incidence, fill = "Malaria Incidence"),
stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_bar(aes(y = Mean_Treatment, fill = "Effective Treatment"),
stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(y = Mean_Incidence, label = round(Mean_Incidence, 1), fill = "Malaria Incidence"),
position = position_dodge(width = 0.7), vjust = -0.5, size = 3.5) +
geom_text(aes(y = Mean_Treatment, label = round(Mean_Treatment, 1), fill = "Effective Treatment"),
position = position_dodge(width = 0.7), vjust = -0.5, size = 3.5) +
scale_fill_manual(
values = c("Malaria Incidence" = "#E63946", "Effective Treatment" = "#457B9D"),
labels = c("Malaria Incidence", "Effective Treatment")
) +
labs(
title = "Comparison of Malaria Incidence and Effective Treatment",
subtitle = "Analyzed across intervention periods",
x = "Intervention Period",
y = "Mean Value",
fill = "Metric"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12, margin = margin(b = 10)),
legend.position = "top",
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10)
)
# Convert the ggplot to an interactive plotly plot
plotly_incEtreatment <- ggplotly(incEtreatment) %>%
layout(
legend = list(title = list(text = "<b>Metric</b>")),
title = list(text = "<b>Comparison of Malaria Incidence and Effective Treatment</b><br><i>Analyzed across intervention periods</i>")
)
# Display the plot
plotly_incEtreatment
ghana_map_2015 <- ghana_map_data %>%
filter(Year == 2015)
# Plotting the interactive malaria hotspots map for 2015
tmap_mode("view")
malaria_hotspots_map <- tm_shape(ghana_map_2015) +
tm_polygons(
col = "Value",
palette = "Reds",
title = "Malaria Incidence (2015)",
border.alpha = 0.5
) +
tm_borders() +
tm_layout(
title = "Malaria Hotspots in Ghana (2015)",
legend.position = c("left", "bottom")
)
# Display the map
malaria_hotspots_map
tmap_mode("plot")
tm_shape(ghana_sf) +
tm_fill("lisa", style = "quantile", title = "LISA (Local Moran's I)") +
tm_borders() +
tm_layout(title = "Local Hotspots of Malaria Incidence")
tmap_mode("plot")
tm_shape(ghana_sf) +
tm_fill(style = "quantile", title = "LISA (Local Moran's I)") +
tm_borders() +
tm_layout(title = "Local Hotspots of Malaria Incidence")
# Visualizing Moran's I results using tmap
tmap_mode("view")
tm_shape(ghana_sf) +
tm_polygons("local_moran", style = "quantile", palette = "-RdBu", midpoint = 0, title = "LISA (Local Moran's I)")
tm_layout(main.title = "Local Moran's I Visualization")
# Kriging interpolation
ghana_kriging <- krige(Value.x ~ 1, ghana_points, ghana_shapefile, model = model)
library(spatialreg)
install.packages("spatialreg")
library(spatialreg)
lag_model <- lagsarlm(Value.x ~ Value.y + Region, data = ghana_sf, listw = lw)
summary(lag_model)
# Extract marginal effects for "Value.y" (intervention coverage)
ghana_sf$marginal_effects <- lag_model$coefficients["Value.y"] * ghana_sf$Value.y
tm_shape(ghana_sf) +
tm_fill("marginal_effects", palette = "Blues", title = "Effect of Intervention Coverage") +
tm_borders() +
tm_layout(title = "Spatial Influence of Intervention Coverage")
# Add predicted values to the spatial dataframe
ghana_sf$predicted <- predict(lag_model, newdata = ghana_sf)
# Add predicted values to the spatial dataframe
ghana_sf$predicted <- predict(lag_model, newdata = ghana_sf, listw = lw)
# Map observed vs. predicted
library(tmap)
tmap_mode("plot")
tm_shape(ghana_sf) +
tm_fill("Value.x", palette = "Reds", title = "Observed") +
tm_borders() +
tm_facets(by = "predicted", ncol = 1) +
tm_layout(title = "Observed vs. Predicted Malaria Incidence")
# Compute residuals
ghana_sf$residuals <- residuals(lag_model)
# Map residuals
tm_shape(ghana_sf) +
tm_fill("residuals", palette = "RdBu", style = "quantile", title = "Residuals") +
tm_borders() +
tm_layout(title = "Residuals of Spatial Lag Model")
# Map residuals
tm_shape(ghana_sf) +
tm_fill("residuals", palette = "RdBu", style = "quantile", title = "Residuals") +
tm_borders() +
tm_layout(
title = "Residuals of Spatial Lag Model",
legend.outside = TRUE  # Places the legend outside the map
)
leaflet(ghana_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", predicted)(predicted),
color = "#BDBDC3", weight = 1,
popup = paste("Predicted:", ghana_sf$predicted)
) %>%
addPolygons(
fillColor = ~colorQuantile("Blues", Value.x)(Value.x),
color = "#BDBDC3", weight = 1,
popup = paste("Observed:", ghana_sf$Value.x)
)
ghana_sf$predicted
leaflet(ghana_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", predicted)(predicted),
color = "#BDBDC3", weight = 1,
popup = ~paste(
"<strong>Predicted:</strong>", predicted, "
",
"<strong>Observed:</strong>", Value.x
)
)
# predicted and observed values
leaflet(ghana_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", predicted)(predicted),
color = "#BDBDC3", weight = 1,
popup = ~paste(
"<br><strong>Predicted:</strong></br>", predicted, "
",
"<strong>Observed:</strong>", Value.x
)
)
# predicted and observed values
leaflet(ghana_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", predicted)(predicted),
color = "#BDBDC3", weight = 1,
popup = ~paste(
"<br><strong>Predicted:</strong></br>", predicted, "
",
"<br><strong>Observed:</strong></br>", Value.x
)
)
# Merge shapefile with full data
ghana_map_data <- merge(ghana_shapefile, ghana_full_data, by.x = "Region", by.y = "Name", all.x = TRUE)
ghana_map_data$Year <- as.integer(ghana_map_data$Year)  # Ensure Year is numeric
library(tidyverse)
library(sf)
library(ggplot2)
library(tmap)
library(dplyr)
library(shiny)
library(DT)
library(leaflet)
library(plotly)
library(spdep)
library(gstat)
library(sp)
# Ghana shapefile
ghana_shapefile <- st_read("/Users/iprincetech/Desktop/R Project/gha_admbnda_gss_20210308_SHP/gha_admbnda_adm1_gss_20210308.shp")
head(ghana_shapefile)
names(ghana_shapefile)
# column names check for merging
names(ghana_shapefile)[names(ghana_shapefile) == "NAME"] <- "Region"
# Renaming columns
ghana_shapefile <- ghana_shapefile %>%
rename(Region = ADM1_EN)
# malaria incidence data
malaria_data <- read.csv("Subnational Unit-data.csv")
head(malaria_data)
names(malaria_data)
# intervention data
intervention_data <- read.csv("ghana_intervention.csv")
# Load treatment data
treatment_data <- read.csv("Treatment.csv")
# Merging with malaria incidence data
ghana_combined_data <- merge(malaria_data, intervention_data,
by = c("ISO3", "Name", "Year"))
# Merge with combined data
ghana_full_data <- merge(ghana_combined_data, treatment_data,
by = c("ISO3", "Name", "Year"), all = TRUE)
str(ghana_full_data)
# Merging shapefile with malaria data
ghana_map_data <- merge(ghana_shapefile, malaria_data,
by.x = "Region", by.y = "Name", all.x = TRUE)
# Merge spatial data with ghana_full_data
ghana_sf <- ghana_shapefile %>%
left_join(ghana_full_data, by = c("Region" = "Name"))
print(ghana_sf)
# Aggregating incidence rates by region and year
ghana_hotspots <- malaria_data %>%
group_by(Name, Year) %>%
summarize(average_incidence = mean(Value, na.rm = TRUE))
# Matching Names & Data Cleaning
unique(ghana_shapefile$Region)
unique(malaria_data$Name)
malaria_data$Name <- trimws(malaria_data$Name)  # Remove extra spaces
# Handling Null Values
ghana_map_data <- ghana_map_data %>% filter(!is.na(Value))
# Aggregate data by year
temporal_trends <- malaria_data %>%
group_by(Year) %>%
summarize(mean_incidence = mean(Value, na.rm = TRUE))
# Temporal Analysis
# Plot trends
plotTrends <- ggplot(temporal_trends, aes(x = Year, y = mean_incidence)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(title = "Temporal Trends in Malaria Incidence",
x = "Year",
y = "Mean Incidence (Cases per Thousand)") +
theme_minimal()
# Making Plot Interactive
interactiveTrends <- ggplotly(plotTrends)
interactiveTrends
# Spatial Analysis
# Subsetting data for 2015
ghana_map_2015 <- ghana_map_data %>%
filter(Year == 2015)
# Plotting the interactive malaria hotspots map for 2015
tmap_mode("view")
malaria_hotspots_map <- tm_shape(ghana_map_2015) +
tm_polygons(
col = "Value",
palette = "Reds",
title = "Malaria Incidence (2015)",
border.alpha = 0.5
) +
tm_borders() +
tm_layout(
title = "Malaria Hotspots in Ghana (2015)",
legend.position = c("left", "bottom")
)
malaria_hotspots_map
# intervention year
intervention_year <- 2012
# averages
comparison <- ghana_combined_data %>%
mutate(Period = ifelse(Year < intervention_year, "Before Intervention", "After Intervention")) %>%
group_by(Name, Period) %>%
summarize(Mean_Incidence = mean(Value.x, na.rm = TRUE),
Mean_Intervention = mean(Value.y, na.rm = TRUE))
print(comparison)
# Plot comparison
# Joining comparison data with the spatial data
ghana_map_data <- ghana_sf %>%
left_join(comparison, by = c("Region" = "Name"), relationship = "many-to-many")
tmap_mode("plot")
tm_shape(ghana_map_data) +
tm_polygons(
col = "Mean_Incidence",
title = "Mean Malaria Incidence (Cases per Thousand)",
palette = "Reds",
style = "jenks"
) +
tm_facets(by = "Period") +
tm_layout(
main.title = "Effectiveness of Malaria Interventions in Ghana",
legend.outside = TRUE
)
# Spatial Auto Correlation
# neighbors based polygons
nb <- poly2nb(ghana_sf, queen = TRUE)
# Converting neighbors to a spatial weights matrix
lw <- nb2listw(nb, style = "W", zero.policy = TRUE)
# variable of interest
ghana_sf <- ghana_sf %>% filter(!is.na(Value.x))
values <- ghana_sf$Value.x
# Moran's I test
moran_test <- moran.test(values, lw, zero.policy = TRUE)
print(moran_test)
moran_plot <- moran.plot(values, lw, zero.policy = TRUE)
# local Moran's I
local_moran <- localmoran(values, lw, zero.policy = TRUE)
ghana_sf$local_moran <- local_moran[, 1]
# Visualizing Moran's I results using tmap
tmap_mode("view")
tm_shape(ghana_sf) +
tm_polygons("local_moran", style = "quantile", palette = "-RdBu", midpoint = 0, title = "LISA (Local Moran's I)")
tm_layout(main.title = "Local Moran's I Visualization")
# Using centroids for polygons
ghana_sf$centroid <- st_centroid(ghana_sf$geometry)
# Converting centroids into a spatial object
ghana_sp <- as(ghana_sf, "Spatial")
# variogram to examine spatial correlation
v.m <- variogram(Value.x ~ 1, data = ghana_sp)
# empirical variogram to understand its structure
emperical <- plot(v.m,
plot.numbers = TRUE,
main = "Empirical Variogram with Plot Numbers",
xlab = "Distance h [m]",
ylab = expression(gamma(h)),
xlim = c(0, 1.055 * max(v.m$dist)),
ylim = c(10000, max(v.m$gamma) * 1.1))
emperical
# Fitted Variogram
model_initial <- vgm(psill = 8000, model = "Exp", range = 200, nugget = 1500)
vm_fit <- fit.variogram(v.m, model = model_initial, fit.method = 6)
print(vm_fit)
max_distance <- max(v.m$dist)
# Plotting the fitted variogram model
fitted_model <- plot(v.m, vm_fit, plot.numbers = TRUE, cutoff = 1.1 * max_distance,
main = "Fitted Variogram Model",
xlab = "Distance",
ylab = expression(gamma(h)))
fitted_model
library(spatialreg)
# Spatial Lag Model
lag_model <- lagsarlm(Value.x ~ Value.y + Region, data = ghana_sf, listw = lw)
summary(lag_model)
# marginal effects for "Value.y" (intervention coverage)
ghana_sf$marginal_effects <- lag_model$coefficients["Value.y"] * ghana_sf$Value.y
tm_shape(ghana_sf) +
tm_fill("marginal_effects", palette = "Blues", title = "Effect of Intervention Coverage") +
tm_borders() +
tm_layout(title = "Spatial Influence of Intervention Coverage")
# residuals
ghana_sf$residuals <- residuals(lag_model)
# Visualization of residuals of spatial lag
tm_shape(ghana_sf) +
tm_fill("residuals", palette = "RdBu", style = "quantile", title = "Residuals", midpoint = NA) +
tm_borders() +
tm_layout(
title = "Residuals of Spatial Lag Model",
legend.outside = TRUE
)
# predicted and observed values
leaflet(ghana_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", predicted)(predicted),
color = "#BDBDC3", weight = 1,
popup = ~paste(
"<br><strong>Predicted:</strong></br>", predicted, "
",
"<br><strong>Observed:</strong></br>", Value.x
)
)
# Correlation between effective treatment and malaria incidence
correlation_analysis <- ghana_full_data %>%
summarize(Correlation = cor(Value.x, Value.y, use = "complete.obs"))
print(correlation_analysis)
# predicted and observed values
leaflet(ghana_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", predicted)(predicted),
color = "#BDBDC3", weight = 1,
popup = ~paste(
"<br><strong>Predicted:</strong></br>", predicted, "
",
"<br><strong>Observed:</strong></br>", Value.x
)
)
leaflet(ghana_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", predicted)(predicted),
color = "#BDBDC3", weight = 1,
popup = ~paste(
"<br><strong>Predicted:</strong></br>", ghana_sf$predicted, "
",
"<br><strong>Observed:</strong></br>", Value.x
)
)
# Add predicted values to the spatial dataframe
ghana_sf$predicted <- predict(lag_model, newdata = ghana_sf)
# Add predicted values to the spatial dataframe
ghana_sf$predicted <- predict(lag_model, newdata = ghana_sf, lw)
leaflet(ghana_sf) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~colorQuantile("YlOrRd", predicted)(predicted),
color = "#BDBDC3", weight = 1,
popup = ~paste(
"<br><strong>Predicted:</strong></br>", predicted, "
",
"<br><strong>Observed:</strong></br>", Value.x
)
)
# Correlation between effective treatment and malaria incidence
correlation_analysis <- ghana_full_data %>%
summarize(Correlation = cor(Value.x, Value.y, use = "complete.obs"))
print(correlation_analysis)
# treatment and malaria incidence trends plot
inciTrends <- plot_ly(data = ghana_full_data, x = ~Year) %>%
add_lines(y = ~Value.x, name = "Malaria Incidence",
line = list(color = 'red', width = 1.2)) %>%
add_lines(y = ~Value.y, name = "Effective Treatment",
line = list(color = 'blue', width = 1.2)) %>%
add_markers(x = ~Year[which.max(Value.x)], y = ~max(Value.x),
name = "Highest Incidence", marker = list(color = 'black')) %>%
layout(
title = "Trends with Highlighted Significant Changes",
xaxis = list(title = "Year"),
yaxis = list(title = "Value (Per 100 Cases or Thousand)")
)
inciTrends
# intervention by period
ghana_full_data <- ghana_full_data %>%
mutate(Period = ifelse(Year < intervention_year, "Before Intervention", "After Intervention"))
# Periodic Incidence & Treatment Mean
treatment_comparison <- ghana_full_data %>%
group_by(Period) %>%
summarize(
Mean_Incidence = mean(Value.x, na.rm = TRUE),
Mean_Treatment = mean(Value.y, na.rm = TRUE)
)
print(treatment_comparison)
# visualizing Periodic Incidence & Treatment Mean
incEtreatment <- ggplot(treatment_comparison, aes(x = Period)) +
geom_bar(aes(y = Mean_Incidence, fill = "Malaria Incidence"),
stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_bar(aes(y = Mean_Treatment, fill = "Effective Treatment"),
stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(y = Mean_Incidence, label = round(Mean_Incidence, 1), fill = "Malaria Incidence"),
position = position_dodge(width = 0.7), vjust = -0.5, size = 3.5) +
geom_text(aes(y = Mean_Treatment, label = round(Mean_Treatment, 1), fill = "Effective Treatment"),
position = position_dodge(width = 0.7), vjust = -0.5, size = 3.5) +
scale_fill_manual(
values = c("Malaria Incidence" = "#E63946", "Effective Treatment" = "#457B9D"),
labels = c("Malaria Incidence", "Effective Treatment")
) +
labs(
title = "Comparison of Malaria Incidence and Effective Treatment",
subtitle = "Analyzed across intervention periods",
x = "Intervention Period",
y = "Mean Value",
fill = "Metric"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 12, margin = margin(b = 10)),
legend.position = "top",
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10)
)
# Convert the ggplot to an interactive plotly plot
plotly_incEtreatment <- ggplotly(incEtreatment) %>%
layout(
legend = list(title = list(text = "<b>Metric</b>")),
title = list(text = "<b>Comparison of Malaria Incidence and Effective Treatment</b><br><i>Analyzed across intervention periods</i>")
)
# Display the plot
plotly_incEtreatment
# Load and prepare the merged dataset
# Merge shapefile with full data
ghana_map_data <- merge(ghana_shapefile, ghana_full_data, by.x = "Region", by.y = "Name", all.x = TRUE)
ghana_map_data$Year <- as.integer(ghana_map_data$Year)  # Ensure Year is numeric
