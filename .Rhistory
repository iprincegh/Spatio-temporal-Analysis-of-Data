tmap_mode("plot")
tm_shape(ghana_map_2015) +
tm_polygons(
col = "Value",
palette = "Reds",
title = "Malaria Incidence (2015)",
border.alpha = 0.5
) +
tm_borders() +
tm_layout(
title = "Malaria Hotspots in Ghana (2015)",
legend.position = c("left", "bottom")
)
})
# Render LISA Plot
output$lisa_plot <- renderTmap({
tmap_mode("plot")
tm_shape(ghana_sf) +
tm_polygons("local_moran", style = "quantile", palette = "-RdBu", midpoint = 0, title = "LISA (Local Moran's I)") +
tm_layout(main.title = "Local Moran's I Visualization")
})
# Moran's I Test Output
output$moran_test <- renderPrint({
req(input$metric)
year_data_filtered <- ghana_map_data %>%
filter(Year == as.numeric(input$year))
if (nrow(year_data_filtered) == 0 || any(is.na(year_data_filtered[[input$metric]]))) {
return("Insufficient data for Moran's I test. Ensure data is available for the selected year and metric.")
}
nb <- poly2nb(year_data_filtered, queen = TRUE)
lw <- nb2listw(nb, style = "W", zero.policy = TRUE)
values <- year_data_filtered[[input$metric]]
tryCatch({
moran <- moran.test(values, lw, zero.policy = TRUE)
print(moran)
}, error = function(e) {
return(paste("Error in Moran's I test:", e$message))
})
})
# Spatial Lag Model Output
output$spatial_lag <- renderPrint({
if (!exists("lag_model")) {
return("Spatial lag model not available.")
}
summary(lag_model)
})
# Ghana Map Data Table
output$ghana_map_data_table <- renderDT({
datatable(ghana_map_data, options = list(
pageLength = 10,  # Show 10 rows per page
scrollX = TRUE,   # Enable horizontal scrolling
scrollY = "300px" # Enable vertical scrolling with a fixed height
))
})
}
# Running Shiny App
shinyApp(ui, server)
# Shiny UI
ui <- fluidPage(
titlePanel("Malaria Spatio-Temporal Dashboard"),
# Custom CSS for styling
tags$head(
tags$style(HTML("
body {
background-color: #f7f7f7;
font-family: 'Arial', sans-serif;
}
.scrollable-container {
height: 300px;
overflow-y: auto;
border: 1px solid #ddd;
padding: 10px;
background-color: #fff;
}
.tab-content > .tab-pane {
height: 800px;
background-color: #fff;
padding: 15px;
border: 1px solid #ddd;
border-radius: 5px;
}
.navbar-default .navbar-brand {
color: #fff;
background-color: #2c3e50;
}
.navbar-default .navbar-nav > li > a {
color: #2c3e50;
}
.navbar-default .navbar-nav > .active > a {
background-color: #18bc9c;
color: #fff;
}
.well {
background-color: #fff;
border: 1px solid #ddd;
border-radius: 5px;
}
"))
),
# Split layout for the dashboard
verticalLayout(
# Upper half: Visualizations and controls (not scrollable)
fluidRow(
column(
width = 3,
wellPanel(
h4("About the Dashboard"),
p("This dashboard provides an interactive visualization of malaria incidence and intervention effectiveness in Ghana over time. Use the controls below to explore the data."),
br(),
h4("Controls"),
sliderInput("year", "Select Year:",
min = 2010,
max = 2020,
value = 2015, step = 1),
selectInput("metric", "Select Metric:",
choices = c("Malaria Incidence" = "Value.x",
"Effective Treatment" = "Value.y"),
selected = "Value.x"),
br(),
h4("Descriptions"),
p(strong("Interactive Map:"), "Displays malaria incidence or intervention effectiveness by region for the selected year."),
p(strong("Malaria Hotspots:"), "Displays malaria hotspots for the selected year."),
p(strong("Trend Analysis:"), "Shows temporal trends of the selected metric across all regions."),
p(strong("Comparison Plot:"), "Compares average malaria incidence and treatment effectiveness before and after intervention."),
p(strong("Fitted Variogram:"), "Displays the fitted variogram for spatial analysis."),
p(strong("LISA Plot:"), "Visualizes Local Indicators of Spatial Association (LISA) for malaria incidence."),
p(strong("Moran's I Test:"), "Tests for spatial autocorrelation in the selected metric for the chosen year."),
p(strong("Spatial Lag Model:"), "Displays the results of a spatial lag model analyzing the relationship between malaria incidence and intervention coverage."),
p(strong("Marginal Effects:"), "Visualizes the marginal effects of intervention coverage on malaria incidence.")
)
),
column(
width = 9,
tabsetPanel(
tabPanel("Interactive Map", leafletOutput("map", height = "750px")),
tabPanel("Malaria Hotspots", tmapOutput("malaria_hotspots", height = "750px")),
tabPanel("Trend Analysis", plotlyOutput("interactive_trends", height = "750px")),
tabPanel("Comparison Plot", plotOutput("comparison_plot", height = "750px")),
tabPanel("Fitted Variogram", plotOutput("fitted_variogram", height = "750px")),
tabPanel("LISA Plot", tmapOutput("lisa_plot", height = "750px")),
tabPanel("Moran's I Test", verbatimTextOutput("moran_test")),
tabPanel("Spatial Lag Model", verbatimTextOutput("spatial_lag")),
tabPanel("Marginal Effects", plotlyOutput("marginal_effects", height = "750px"))
)
)
),
# Lower half: Ghana Map Data Table (scrollable)
fluidRow(
column(
width = 12,
wellPanel(
h4("Ghana Map Data"),
div(class = "scrollable-container",  # Apply the scrollable container class
DTOutput("ghana_map_data_table"))
)
)
)
)
)
# Server logic
server <- function(input, output, session) {
# Reactive dataset based on selected year
year_data <- reactive({
req(input$year)
ghana_map_data %>%
filter(Year == as.numeric(input$year))
})
# Render Leaflet Map
output$map <- renderLeaflet({
req(year_data(), input$metric)
pal <- colorNumeric("YlOrRd", domain = year_data()[[input$metric]], na.color = "transparent")
leaflet(year_data()) %>%
addTiles() %>%
addPolygons(
color = "black", weight = 1, smoothFactor = 0.5,
fillColor = ~pal(year_data()[[input$metric]]),
fillOpacity = 0.7,
popup = ~paste0("<b>Region:</b> ", Region, "<br>",
"<b>Year:</b> ", Year, "<br>",
"<b>", input$metric, ":</b> ", round(year_data()[[input$metric]], 2))
) %>%
addLegend(pal = pal, values = year_data()[[input$metric]], title = input$metric, position = "bottomright")
})
# Render Interactive Trends Plot
output$interactive_trends <- renderPlotly({
plotly::ggplotly(interactiveTrends)  # Convert ggplot to interactive plotly
})
# Render Comparison Plot
output$comparison_plot <- renderPlot({
# Plot comparison data
ggplot(comparison, aes(x = Period, y = Mean_Incidence, fill = Period)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Malaria Incidence Before and After Intervention",
x = "Period",
y = "Mean Incidence (Cases per Thousand)") +
theme_minimal()
})
# Render Fitted Variogram Plot
output$fitted_variogram <- renderPlot({
# Replace `v.m` and `vm_fit` with your actual variogram and fitted model
plot(v.m, vm_fit, plot.numbers = TRUE, main = "Fitted Variogram Model")
})
# Render Marginal Effects Map
output$marginal_effects <- renderTmap({
req(ghana_sf)
# Ensure required column exists
if (!"marginal_effects" %in% colnames(ghana_sf)) {
return(NULL)
}
# Set tmap mode for rendering in Shiny
tmap_mode("view")  # Interactive mode
# Create the tmap visualization
tm_shape(ghana_sf) +
tm_polygons(
col = "marginal_effects",
palette = "YlGnBu",
title = "Marginal Effects",
border.alpha = 0.5
) +
tm_borders() +
tm_layout(
title = "Spatial Distribution of Marginal Effects",
legend.position = c("left", "bottom")
)
})
# Render Malaria Hotspots Plot
output$malaria_hotspots <- renderTmap({
tmap_mode("plot")
tm_shape(ghana_map_2015) +
tm_polygons(
col = "Value",
palette = "Reds",
title = "Malaria Incidence (2015)",
border.alpha = 0.5
) +
tm_borders() +
tm_layout(
title = "Malaria Hotspots in Ghana (2015)",
legend.position = c("left", "bottom")
)
})
# Render LISA Plot
output$lisa_plot <- renderTmap({
tmap_mode("plot")
tm_shape(ghana_sf) +
tm_polygons("local_moran", style = "quantile", palette = "-RdBu", midpoint = 0, title = "LISA (Local Moran's I)") +
tm_layout(main.title = "Local Moran's I Visualization")
})
# Moran's I Test Output
output$moran_test <- renderPrint({
req(input$metric)
year_data_filtered <- ghana_map_data %>%
filter(Year == as.numeric(input$year))
if (nrow(year_data_filtered) == 0 || any(is.na(year_data_filtered[[input$metric]]))) {
return("Insufficient data for Moran's I test. Ensure data is available for the selected year and metric.")
}
nb <- poly2nb(year_data_filtered, queen = TRUE)
lw <- nb2listw(nb, style = "W", zero.policy = TRUE)
values <- year_data_filtered[[input$metric]]
tryCatch({
moran <- moran.test(values, lw, zero.policy = TRUE)
print(moran)
}, error = function(e) {
return(paste("Error in Moran's I test:", e$message))
})
})
# Spatial Lag Model Output
output$spatial_lag <- renderPrint({
if (!exists("lag_model")) {
return("Spatial lag model not available.")
}
summary(lag_model)
})
# Ghana Map Data Table
output$ghana_map_data_table <- renderDT({
datatable(ghana_map_data, options = list(
pageLength = 10,  # Show 10 rows per page
scrollX = TRUE,   # Enable horizontal scrolling
scrollY = "300px" # Enable vertical scrolling with a fixed height
))
})
}
# Running Shiny App
shinyApp(ui, server)
# Shiny UI
ui <- fluidPage(
titlePanel("Malaria Spatio-Temporal Dashboard"),
# Custom CSS for styling
tags$head(
tags$style(HTML("
body {
background-color: #f7f7f7;
font-family: 'Arial', sans-serif;
}
.scrollable-container {
height: 300px;
overflow-y: auto;
border: 1px solid #ddd;
padding: 10px;
background-color: #fff;
}
.tab-content > .tab-pane {
height: 800px;
background-color: #fff;
padding: 15px;
border: 1px solid #ddd;
border-radius: 5px;
}
.navbar-default .navbar-brand {
color: #fff;
background-color: #2c3e50;
}
.navbar-default .navbar-nav > li > a {
color: #2c3e50;
}
.navbar-default .navbar-nav > .active > a {
background-color: #18bc9c;
color: #fff;
}
.well {
background-color: #fff;
border: 1px solid #ddd;
border-radius: 5px;
}
"))
),
# Split layout for the dashboard
verticalLayout(
# Upper half: Visualizations and controls (not scrollable)
fluidRow(
column(
width = 3,
wellPanel(
h4("About the Dashboard"),
p("This dashboard provides an interactive visualization of malaria incidence and intervention effectiveness in Ghana over time. Use the controls below to explore the data."),
br(),
h4("Controls"),
sliderInput("year", "Select Year:",
min = 2010,
max = 2020,
value = 2015, step = 1),
selectInput("metric", "Select Metric:",
choices = c("Malaria Incidence" = "Value.x",
"Effective Treatment" = "Value.y"),
selected = "Value.x"),
br(),
h4("Descriptions"),
p(strong("Interactive Map:"), "Displays malaria incidence or intervention effectiveness by region for the selected year."),
p(strong("Malaria Hotspots:"), "Displays malaria hotspots for the selected year."),
p(strong("Trend Analysis:"), "Shows temporal trends of the selected metric across all regions."),
p(strong("Comparison Plot:"), "Compares average malaria incidence and treatment effectiveness before and after intervention."),
p(strong("Fitted Variogram:"), "Displays the fitted variogram for spatial analysis."),
p(strong("LISA Plot:"), "Visualizes Local Indicators of Spatial Association (LISA) for malaria incidence."),
p(strong("Moran's I Test:"), "Tests for spatial autocorrelation in the selected metric for the chosen year."),
p(strong("Spatial Lag Model:"), "Displays the results of a spatial lag model analyzing the relationship between malaria incidence and intervention coverage."),
p(strong("Marginal Effects:"), "Visualizes the marginal effects of intervention coverage on malaria incidence.")
)
),
column(
width = 9,
tabsetPanel(
tabPanel("Interactive Map", leafletOutput("map", height = "750px")),
tabPanel("Malaria Hotspots", tmapOutput("malaria_hotspots", height = "750px")),
tabPanel("Trend Analysis", plotlyOutput("interactive_trends", height = "750px")),
tabPanel("Comparison Plot", plotOutput("comparison_plot", height = "750px")),
tabPanel("Fitted Variogram", plotOutput("fitted_variogram", height = "750px")),
tabPanel("LISA Plot", tmapOutput("lisa_plot", height = "750px")),
tabPanel("Moran's I Test", verbatimTextOutput("moran_test")),
tabPanel("Spatial Lag Model", verbatimTextOutput("spatial_lag")),
tabPanel("Marginal Effects", plotlyOutput("marginal_effects", height = "750px"))
)
)
),
# Lower half: Ghana Map Data Table (scrollable)
fluidRow(
column(
width = 12,
wellPanel(
h4("Ghana Map Data"),
div(class = "scrollable-container",  # Apply the scrollable container class
DTOutput("ghana_map_data_table"))
)
)
)
)
)
# Server logic
server <- function(input, output, session) {
# Reactive dataset based on selected year
year_data <- reactive({
req(input$year)
ghana_map_data %>%
filter(Year == as.numeric(input$year))
})
# Render Leaflet Map
output$map <- renderLeaflet({
req(year_data(), input$metric)
pal <- colorNumeric("YlOrRd", domain = year_data()[[input$metric]], na.color = "transparent")
leaflet(year_data()) %>%
addTiles() %>%
addPolygons(
color = "black", weight = 1, smoothFactor = 0.5,
fillColor = ~pal(year_data()[[input$metric]]),
fillOpacity = 0.7,
popup = ~paste0("<b>Region:</b> ", Region, "<br>",
"<b>Year:</b> ", Year, "<br>",
"<b>", input$metric, ":</b> ", round(year_data()[[input$metric]], 2))
) %>%
addLegend(pal = pal, values = year_data()[[input$metric]], title = input$metric, position = "bottomright")
})
# Render Interactive Trends Plot
output$interactive_trends <- renderPlotly({
plotly::ggplotly(interactiveTrends)  # Convert ggplot to interactive plotly
})
# Render Comparison Plot
output$comparison_plot <- renderPlot({
# Plot comparison data
ggplot(comparison, aes(x = Period, y = Mean_Incidence, fill = Period)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Malaria Incidence Before and After Intervention",
x = "Period",
y = "Mean Incidence (Cases per Thousand)") +
theme_minimal()
})
# Render Fitted Variogram Plot
output$fitted_variogram <- renderPlot({
# Replace `v.m` and `vm_fit` with your actual variogram and fitted model
plot(v.m, vm_fit, plot.numbers = TRUE, main = "Fitted Variogram Model")
})
# Render Marginal Effects Map
output$marginal_effects <- renderTmap({
req(ghana_sf)
# Ensure required column exists
if (!"marginal_effects" %in% colnames(ghana_sf)) {
return(NULL)
}
# Set tmap mode for rendering in Shiny
tmap_mode("view")  # Interactive mode
# Create the tmap visualization
tm_shape(ghana_sf) +
tm_polygons(
col = "marginal_effects",
palette = "YlGnBu",
title = "Marginal Effects",
border.alpha = 0.5
) +
tm_borders() +
tm_layout(
title = "Spatial Distribution of Marginal Effects",
legend.position = c("left", "bottom")
)
})
# Render Malaria Hotspots Plot
output$malaria_hotspots <- renderTmap({
tmap_mode("plot")
tm_shape(ghana_map_2015) +
tm_polygons(
col = "Value",
palette = "Reds",
title = "Malaria Incidence (2015)",
border.alpha = 0.5
) +
tm_borders() +
tm_layout(
title = "Malaria Hotspots in Ghana (2015)",
legend.position = c("left", "bottom")
)
})
# Render LISA Plot
output$lisa_plot <- renderTmap({
tmap_mode("plot")
tm_shape(ghana_sf) +
tm_polygons("local_moran", style = "quantile", palette = "-RdBu", midpoint = 0, title = "LISA (Local Moran's I)") +
tm_layout(main.title = "Local Moran's I Visualization")
})
# Moran's I Test Output
output$moran_test <- renderPrint({
req(input$metric)
year_data_filtered <- ghana_map_data %>%
filter(Year == as.numeric(input$year))
if (nrow(year_data_filtered) == 0 || any(is.na(year_data_filtered[[input$metric]]))) {
return("Insufficient data for Moran's I test. Ensure data is available for the selected year and metric.")
}
nb <- poly2nb(year_data_filtered, queen = TRUE)
lw <- nb2listw(nb, style = "W", zero.policy = TRUE)
values <- year_data_filtered[[input$metric]]
tryCatch({
moran <- moran.test(values, lw, zero.policy = TRUE)
print(moran)
}, error = function(e) {
return(paste("Error in Moran's I test:", e$message))
})
})
# Spatial Lag Model Output
output$spatial_lag <- renderPrint({
if (!exists("lag_model")) {
return("Spatial lag model not available.")
}
summary(lag_model)
})
# Ghana Map Data Table
output$ghana_map_data_table <- renderDT({
datatable(ghana_map_data, options = list(
pageLength = 10,  # Show 10 rows per page
scrollX = TRUE,   # Enable horizontal scrolling
scrollY = "300px" # Enable vertical scrolling with a fixed height
))
})
}
# Running Shiny App
shinyApp(ui, server)
library(shiny); runApp('GHmalariaanalysis.R')
